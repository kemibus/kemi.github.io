# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
lapply(row_values, create_article_text)
# Define function to loop through each text file
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Correctly construct the file path based on the system
# Ensure the path uses the correct system format
if (Sys.info()['sysname'] == "Windows") {
# If on Windows, remove the tilde (~) and use the absolute path
temp_filepath <- paste0("C:/Users/kemmy/Documents/GitHub/kemi_new/dele_extracted/", temp$filename)
} else {
# If on Mac/Linux, use the Unix-style path
temp_filepath <- paste0("~/GitHub/kemi_new/dele_extracted/", temp$filename)
}
# Store the filename for use in constructing the articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given text file
# Add a filename column
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# Create elements needed to run the function
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and appends results to the master file
lapply(row_values, create_article_text)
# Define function to loop through each text file
# Define function to loop through each text file
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Check if the full file path exists
temp_filepath <- temp$filepath
# Ensure that the filepath is correctly constructed and doesn't duplicate
if (Sys.info()['sysname'] == "Windows") {
# If on Windows, remove the tilde (~) and use the absolute path, ensure it's not duplicated
temp_filepath <- gsub("^~", "C:/Users/kemmy/Documents/GitHub/kemi_new", temp_filepath)
}
# Check if file exists
if (!file.exists(temp_filepath)) {
message(paste("File does not exist:", temp_filepath))
return(NULL)  # If the file doesn't exist, skip this iteration
}
# Store the filename for use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of the given text file
# Add a filename column
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# Create elements needed to run the function
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and appends results to the master file
lapply(row_values, create_article_text)
# Clean up articles_df and join to index dataframe
articles_df <- articles_df %>%
select(filename, sentence=value) %>%
inner_join(final_index)
# Define function to loop through each text file
# Define function to loop through each text file
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Check if the full file path exists
temp_filepath <- temp$filepath
# Ensure that the filepath is correctly constructed and doesn't duplicate
if (Sys.info()['sysname'] == "Windows") {
# If on Windows, remove the tilde (~) and use the absolute path, ensure it's not duplicated
temp_filepath <- gsub("^~", "GitHub/kemi_new", temp_filepath)
}
# Check if file exists
if (!file.exists(temp_filepath)) {
message(paste("File does not exist:", temp_filepath))
return(NULL)  # If the file doesn't exist, skip this iteration
}
# Store the filename for use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of the given text file
# Add a filename column
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# Create elements needed to run the function
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and appends results to the master file
lapply(row_values, create_article_text)
# Clean up articles_df and join to index dataframe
articles_df <- articles_df %>%
select(filename, sentence=value) %>%
inner_join(final_index)
# Define function to loop through each text file
# Define function to loop through each text file
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Ensure that the filepath is correctly formed, without duplication
temp_filepath <- temp$filepath
# Check if file exists
if (!file.exists(temp_filepath)) {
message(paste("File does not exist:", temp_filepath))
return(NULL)  # If the file doesn't exist, skip this iteration
}
# Store the filename for use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of the given text file
# Add a filename column
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# Create elements needed to run the function
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and appends results to the master file
lapply(row_values, create_article_text)
# Clean up articles_df and join to index dataframe
articles_df <- articles_df %>%
select(filename, sentence=value) %>%
inner_join(final_index)
articles_df <- articles_df %>%
select(filename, sentence=value) %>%
inner_join(final_index)
# Define function to loop through each text file
# Define function to loop through each text file
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Ensure that the filepath is correctly formed, without duplication
temp_filepath <- temp$filepath
# Check if file exists
if (!file.exists(temp_filepath)) {
message(paste("File does not exist:", temp_filepath))
return(NULL)  # If the file doesn't exist, skip this iteration
}
# Store the filename for use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of the given text file
# Add a filename column
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# Create elements needed to run the function
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and appends results to the master file
lapply(row_values, create_article_text)
# Check the column names of the articles_df before proceeding
colnames(articles_df)
# Clean up articles_df and join to index dataframe
articles_df <- articles_df %>%
select(filename, sentence = X1) %>%  # Replace X1 with the actual column name
inner_join(final_index)
# Define function to loop through each text file
# Define function to loop through each text file
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Ensure that the filepath is correctly formed, without duplication
temp_filepath <- temp$filepath
# Check if file exists
if (!file.exists(temp_filepath)) {
message(paste("File does not exist:", temp_filepath))
return(NULL)  # If the file doesn't exist, skip this iteration
}
# Store the filename for use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of the given text file
# Add a filename column
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# Create elements needed to run the function
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
# Execute function using lapply
# This loops through each row of the dataframe and appends results to the master file
lapply(row_values, create_article_text)
# Check the column names of the articles_df before proceeding
colnames(articles_df)
# Clean up articles_df and join to index dataframe
articles_df <- articles_df %>%
select(filename, sentence = X1) %>%  # Replace X1 with the actual column name
inner_join(final_index)
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>% slice(row_value)
# Construct the file path
temp_filepath <- temp$filepath
# Print the path for debugging
message("Processing file: ", temp_filepath)
# Check if file exists
if (!file.exists(temp_filepath)) {
message("File does not exist: ", temp_filepath)
return(NULL)  # Skip this file if it does not exist
}
# Read lines from the file and create a dataframe
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp$filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>% bind_rows(articles_df_temp)
}
# Ensure `final_index$filepath` is correct
print(head(final_index))
# Iterate through rows
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
# Clean and write final dataframe
articles_df <- articles_df %>%
select(filename, sentence = X1) %>%
inner_join(final_index, by = "filename") %>%
filter(trimws(sentence) != "")  # Remove blank rows
View(final_index)
View(final_index)
View(articles_df)
# Check the structure of articles_df before cleaning
print(head(articles_df))
# Clean up articles_df
articles_df <- articles_df %>%
select(filename, sentence = value) %>%  # Ensure 'value' is the correct column
inner_join(final_index, by = "filename") %>%  # Join with final_index on 'filename'
filter(trimws(sentence) != "")  # Remove blank rows
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>% slice(row_value)
# Construct the file path
temp_filepath <- temp$filepath
# Print the path for debugging
message("Processing file: ", temp_filepath)
# Check if file exists
if (!file.exists(temp_filepath)) {
message("File does not exist: ", temp_filepath)
return(NULL)  # Skip this file if it does not exist
}
# Read lines from the file and create a dataframe
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp$filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>% bind_rows(articles_df_temp)
}
# Ensure `final_index$filepath` is correct
print(head(final_index))
# Iterate through rows
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
# Clean and write final dataframe
articles_df <- articles_df %>%
select(filename, sentence = X1) %>%
inner_join(final_index, by = "filename") %>%
filter(trimws(sentence) != "")  # Remove blank rows
View(final_index)
View(final_index)
create_article_text <- function(row_value) {
# Take each row of the dataframe
temp <- final_index %>% slice(row_value)
# Construct the file path
temp_filepath <- temp$filepath
# Print the path for debugging
message("Processing file: ", temp_filepath)
# Check if file exists
if (!file.exists(temp_filepath)) {
message("File does not exist: ", temp_filepath)
return(NULL)  # Skip this file if it does not exist
}
# Read lines from the file and create a dataframe
articles_df_temp <- read_lines(temp_filepath) %>%
as_tibble() %>%
mutate(filename = temp$filename)
# Bind results to master articles_df (global environment)
articles_df <<- articles_df %>% bind_rows(articles_df_temp)
}
# Ensure `final_index$filepath` is correct
print(head(final_index))
# Iterate through rows
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
# Clean and write final dataframe
articles_df <- articles_df %>%
select(filename, sentence = X1) %>%
inner_join(final_index, by = "filename") %>%
filter(trimws(sentence) != "")  # Remove blank rows
# Define function to loop through each text file
create_article_text <- function(row_value) {
temp <- final_index %>%
slice(row_value)
temp_filename <- temp$filename
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
articles_df <- tibble()
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
# List all text files in the directory
files <- list.files("~/GitHub/kemi_new/dele_extracted", pattern="*.txt", full.names = TRUE) %>%
as.data.frame() |>
rename(filename = 1) |>
mutate(
# Create an index with the file name
index = str_extract(filename, "\\d+"),
index = as.numeric(index)
)
# Read the content of each text file and store it in a new column
files <- files |>
mutate(
content = map(filename, ~ read_lines(.x))
)
# Join the file list to the final_data dataframe based on index
final_index <- final_data |>
inner_join(files, by = "index") |>
mutate(filepath = paste0("~/kemi_new/dele_extracted/", filename))
# Display the head of the compiled dataframe with filenames and content
head(final_index)
# Define function to loop through each text file
create_article_text <- function(row_value) {
temp <- final_index %>%
slice(row_value)
temp_filename <- temp$filename
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
articles_df <- tibble()
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
dele_index <- read_lines("~/GitHub/kemi_new/dele_extracted/dele_article_1.txt ")
extracted_lines <-dele_index[7:1517]
cat(head(extracted_lines, 7), sep = "\n")
extracted_lines <- extracted_lines |>
as.data.frame()
# Define function to loop through each text file
create_article_text <- function(row_value) {
temp <- final_index %>%
slice(row_value)
temp_filename <- temp$filename
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
articles_df <- tibble()
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
dele_index <- read_lines("GitHub\kemi_new\dele_extracted\dele_article_1.txt")
dele_index <- read_lines("~/GitHub/kemi_new/dele_extracted/dele_article_1.txt")
extracted_lines <-dele_index[7:1517]
cat(head(extracted_lines, 7), sep = "\n")
extracted_lines <- extracted_lines |>
as.data.frame()
# Step 1: Trim spaces and detect rows with titles and dates
cleaned_data <- extracted_lines |>
mutate(
# Trim leading and trailing spaces before detection
trimmed_line = str_trim(extracted_lines),
# Detect titles (start with a number and a period)
is_title = str_detect(trimmed_line, "^\\d+\\. "),
# Detect dates (e.g., "Aug 14, 2024")
is_date = str_detect(trimmed_line, "\\b\\w{3} \\d{1,2}, \\d{4}\\b")
)
# Step 2: Shift dates to align with corresponding titles
aligned_data <- cleaned_data |>
mutate(
date = ifelse(lead(is_date, 1), lead(trimmed_line, 1), NA_character_)  # Shift date to title's row
) |>
filter(is_title) |>
select(trimmed_line, date)  # Keep only the relevant columns
# Step 3: Rename columns for clarity
final_data <- aligned_data |>
rename(
title = trimmed_line,
date = date
)
# Step 4: Date and Publication in separate columns, and formatted
final_data <- separate(data = final_data, col = date, into = c("date2", "publication"), sep = "  ", extra = "merge", fill = "right")
# Step 5: Format date, clean headline
final_data <- final_data |>
mutate(date = as.Date(date2,format = "%b %d, %Y")) |>
mutate(title = str_remove(title, "^\\d+\\. ")) |>
subset(select = -(date2)) |>
mutate(index = row_number()) |>
select(index, date, title, publication)
# Save final data
write_csv(final_data, "dele_extracted/final_data.csv")
# List all text files in the directory
files <- list.files("~/GitHub/kemi_new/dele_extracted", pattern="*.txt", full.names = TRUE) %>%
as.data.frame() |>
rename(filename = 1) |>
mutate(
# Create an index with the file name
index = str_extract(filename, "\\d+"),
index = as.numeric(index)
)
# Read the content of each text file and store it in a new column
files <- files |>
mutate(
content = map(filename, ~ read_lines(.x))
)
# Join the file list to the final_data dataframe based on index
final_index <- final_data |>
inner_join(files, by = "index") |>
mutate(filepath = paste0("~/kemi_new/dele_extracted/", filename))
# Display the head of the compiled dataframe with filenames and content
head(final_index)
# Define function to loop through each text file
create_article_text <- function(row_value) {
temp <- final_index %>%
slice(row_value)
temp_filename <- temp$filename
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
articles_df <- tibble()
row_values <- 1:nrow(final_index)
lapply(row_values, create_article_text)
library(pdftools)
library(tidyverse)
library(stringr)
library(readxl)
library(rio)
library(tidytext)
library(dplyr)
library(tidyr)
# Specify the file path
filepath <- "~/GitHub/kemi_new/dele.PDF"
#Read text
dele_text <- pdf_text("dele.PDF")
#write to a text file
writeLines (dele_text, "dele_extracted/dele_text.txt")
#Read the text from the PDF
#dele_text <- pdf_text("~/GitHub/kemi_new/dele.PDF")
file_path <- ("dele_extracted/dele_text.txt")
text_data <- readline(file_path)
library(pdftools)
library(tidyverse)
library(stringr)
library(readxl)
library(rio)
library(tidytext)
library(dplyr)
library(tidyr)
#link - https://github.com/kemibus/kemi_new/blob/main/dele.PDF
# Specify the file path
filepath <- "~/GitHub/kemi_new/dele.PDF"
#Read text
dele_text <- pdf_text("dele.PDF")
#write to a text file
writeLines (dele_text, "dele_extracted/dele_text.txt")
#Read the text from the PDF
#dele_text <- pdf_text("~/GitHub/kemi_new/dele.PDF")
file_path <- ("dele_extracted/dele_text.txt")
text_data <- readline(file_path)
